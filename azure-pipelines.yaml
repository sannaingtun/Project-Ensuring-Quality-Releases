name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - master

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise, comment out the line below.
#pool: myAgentPool
pool:
  vmImage: ubuntu-latest

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: '8028090b-78c4-48dc-a821-a5c3600516e9'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Provision
    jobs:
      - job: BuildInfrastructure
        steps:
          #--------------------------------------------#
          # Use Terraform to create the Infrastructure
          # Install Terraform on the pipeline agent
          - task: TerraformInstaller@0
            displayName: 'Terrafom installation'
            inputs:
              terraformVersion: '1.2.9'

          # Run Terraform Init on the pipeline agent
          # ToDo: Replace the resource group name, storage account name, and container name below
          - task: TerraformTaskV3@3
            displayName: 'Terrafom init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              backendServiceArm: '$(azureServiceConnectionId)'
              backendAzureRmResourceGroupName: 'Azuredevops'
              backendAzureRmStorageAccountName: 'tfstate1253325089'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'test.terraform.tfstate'

          # ToDo: Run Terraform Validate
          - task: TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: 'azurerm'
              command: 'validate'

          # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
          # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
          # Install public key and private key file to the pipeline agent, using the task below.
          # ToDo: Change the inputs value below
          # - task: InstallSSHKey@0
          #   inputs:
          #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
          #     sshPublicKey: 'PUBLIC_KEY'            # variable value
          #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

          # - task: DownloadSecureFile@1
          #  name: udacity_public_key
          #  displayName:
          #  inputs:
          #   secureFile:

          # Run Terraform Apply
          # ToDo: Change the workingDirectory path, as applicable to you
          - task: TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

          # ToDo: Change the workingDirectory path, as applicable to you
          # Destroy the resources in Azure by running a separate pipeline.
          # - task: TerraformTaskV3@3
          #   displayName: Terraform destroy
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'destroy'
          #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
          #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

  - stage: Build
    jobs:
      - job: BuildPackage
        steps:
          #--------------------------------------------#
          # Selenium (UI) Test Suite - Archive the package
          # "ArchiveFiles@2" picks up the web package and archives it.
          - task: ArchiveFiles@2
            displayName: 'Archive UI Tests'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
          # Selenium Test Suite - Publish the package
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip # Same as the archiveFile artifact above.
            displayName: 'Upload Selenium Test Package'
            artifact: drop-uitests

          #--------------------------------------------#
          # FakeRestAPI - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: zip
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          # FakeRestAPI - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: 'Update API Package'
            artifact: drop-fakerestapi

          #--------------------------------------------#
          # JMeter (Performance) Test Suite - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          # - task: ArchiveFiles@2
          #   displayName: 'Archive PerformanceTestSuite'
          #   inputs:
          #     rootFolderOrFile:
          #     includeRootFolder:
          #     archiveType:
          #     archiveFile:
          # # JMeter Test Suite - Publish
          # - publish:
          #   displayName:
          #   artifact:

  #--------------------------------------------#
  # DEPLOYMENT STAGE
  #--------------------------------------------#
  - stage: Deploy
    jobs:
      #--------------------------------------------#
      # Deploy FakeRestAPI Web App
      # ToDo: Provide <environment name> you created in your DevOps project
      - deployment: FakeRestAPI
        pool:
          vmImage: 'ubuntu-latest'
        environment: DeployVM # ToDo
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy Azure Web App'
                  inputs:
                    azureSubscription: '$(azureServiceConnectionId)' # ToDo
                    appName: myApplication-AppService # ToDo
                    appType: webApp
                    package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip' # ToDo: Use the published zip artifact.
                #--------------------------------------------#
                # Run JMeter test suite against the App Service
                # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.
                # ToDo: Generate the log file.
                # - task: CmdLine@2
                #   inputs:
                #     script: |
                #       # ToDo: Write your commands
                #     workingDirectory: $(Pipeline.Workspace)/<artifact> # ToDo: Use the artifact name from the task above

      #--------------------------------------------#
      # Selenium | Functional UI Tests
      # ToDo:
      - deployment: DeployForUITest
        displayName: Selenium Tests
        environment:
          name: myApplicationvm # ToDo: Change/provide a name
          resourceType: VirtualMachine
          tags: selenium
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-uitests # ToDo: Change/provide a name

                - task: Bash@3
                  inputs:
                    targetType: 'inline'
                    script: |
                      # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
                      #! /bin/bash

                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      sudo apt-get install -y chromium-chromedriver
                      pip3 install selenium

                      #  ToDo: Add chromedriver executable to path
                      export PATH=$PATH:/path/to/chromedriver
                      ls -la
                      rm chromedriver*
                      ls -la
                      wget "https://chromedriver.storage.googleapis.com/105.0.5195.52/chromedriver_linux64.zip"
                      pwd
                      echo $PATH
                      ls -la     

                      # ToDo: Write commands for deploying the UI Test Suite (published zip artifact) to the linux VM and execute the Test Suite
                      # ToDo: Direct the output of the Selenium Test Suite to a log file
                - task: ExtractFiles@1
                  displayName: 'Extract Files'
                  inputs:
                    archiveFilePatterns: '*chromedriver_linux64.zip'
                    destinationFolder: '$(System.DefaultWorkingDirectory)'
                    cleanDestinationFolder: false
                - task: Bash@3
                  displayName: 'Copy Files to bin'
                  inputs:
                    targetType: 'inline'
                    script: |
                      #! /bin/bash
                      sudo cp chromedriver /usr/bin
                      pwd
                      echo $PATH
                      ls -la
                      echo "Completed Copying"
                - task: Bash@3
                  displayName: 'Running Selenium Test'
                  inputs:
                    targetType: 'inline'
                    script: |
                      #! /bin/bash
                      unzip -o $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip -d .
                      pwd
                      echo $PATH
                      ls -la
                      python3 login.py > ui-test.log
                      ls -la
                      cat ui-test.log

  - stage: Test
    jobs:
      - job: IntegrationTest
        steps:
          #--------------------------------------------#
          # Postman - Install Newman
          # ToDo: Update the command and verify the working directory
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: npm install -g newman # ToDo: Write your commands to install newman
              workingDirectory: $(System.DefaultWorkingDirectory)
          # Postman Data Validation Test Suite
          # ToDo: Verify the working directory and the newman scripts
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: 'newman run Validation.postman_collection.json -e CICD.postman_environment.json --reporters cli,junit --reporter-junit-export $(System.DefaultWorkingDirectory)/TEST-ValidationReport.xml' # ToDo: Write your commands
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman Regression Test Suite
          # ToDo: Update the command and verify the working directory
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: 'newman run RegressionTest.postman_collection.json -e CICD.postman_environment.json --reporters cli,junit --reporter-junit-export $(System.DefaultWorkingDirectory)/TEST-RegressionReport.xml' # ToDo: Write your commands
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          # Postman - Publish Results
          # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: $(System.DefaultWorkingDirectory) # ToDo
              mergeTestResults: true
              testRunTitle: Validation and Regression Test # ToDo

      - job: PerformanceTest
        steps:
          - bash: |
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              mkdir -p log/jmeter
            displayName: Install JMeter
          #- task: JMeterInstaller@0
          #  displayName: Install JMeter 5.4.3
          #  inputs:
          #    jmeterVersion: '5.4.3'
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/stress_test_suit.jmx \
                                          -l log/jmeter/stress-test-results.csv \
                                          -e -f -o log/jmeter/stress-test-report \
                                          -j log/jmeter/stress-test.log
            displayName: JMeter stress test
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/endurance_test_suit.jmx \
                                          -l log/jmeter/endurance-test-results.csv \
                                          -e -f -o log/jmeter/endurance-test-report \
                                          -j log/jmeter/endurance-test.log
            displayName: JMeter endurance test
          - task: PublishPipelineArtifact@1
            displayName: Publish Performance Test Logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              ArtifactName: 'drop-performance-test'
